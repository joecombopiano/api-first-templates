apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: springboot-rest-template
  title: Spring Boot REST API Service
  description: Creates a simple microservice using Open API and Spring Boot Java based on our Golden Path
  tags:
    - recommended
    - java
    - rest
spec:
  owner: service@example.com
  type: service

  parameters:
    - title: Provide some simple information
      required:
        - component_id
      properties:
        api:
          title: API
          type: string
          description: API to use to scaffold project
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind: Api
            defaultKind: Api
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
        description:
          title: Description
          type: string
          description: Help others understand what this website is for.
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: fetchAPI
      name: Fetch API
      action: catalog:fetch
      input:
        entityRef: ${{ parameters.api }}
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender:
          - .github/workflows/*
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          java_package_name: ${{ parameters.component_id }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          api_schema: ${{steps['fetchAPI'].output.entity.spec.definition}}
          http_port: 8080
          api_name: ${{ parameters.api }}

    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.component_id }}
        repoUrl: ${{ parameters.repoUrl }}

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
