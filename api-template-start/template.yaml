apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: api-first-template
  title: API First Starter Template
  description: An template to create a new repo for API first development
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the api
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Description
          type: string
          description: Enter a description of the API
          ui:options:
            rows: 5
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
    - title: Paste initial schema
      required:
        - schema
      properties:
        schema_type:
          title: API Schema Type
          type: string
          enum:
          - openapi
          - grpc
          enumNames:
          - Open API
          - GRPC
          description: What type of API schema is this?
        schema:
          title: API Schema
          type: string
          description: Insert your multi line string
          ui:widget: textarea


  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base-open-api
      name: Fetch Base
      action: fetch:template
      if: ${{ parameters.schema_type == 'openapi' }}
      input:
        url: ./skeleton-open-api
        values:
          name: ${{ parameters.name }}
          repoUrl: ${{ parameters.repoUrl}}
          schema: ${{ parameters.schema }}
          description: ${{ parameters.description }}
          schema_type: ${{ parameters.schema_type }}
          
    - id: fetch-base-grpc
      name: Fetch Base
      action: fetch:template
      if: ${{ parameters.schema_type == 'grpc' }}
      input:
        url: ./skeleton-grpc
        values:
          name: ${{ parameters.name }}
          repoUrl: ${{ parameters.repoUrl}}
          schema: ${{ parameters.schema }}
          description: ${{ parameters.description }}
          schema_type: ${{ parameters.schema_type }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
